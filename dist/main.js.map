{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tipoffteams/webpack/bootstrap","webpack://tipoffteams/./src/scripts/teamLogic.js","webpack://tipoffteams/./src/backgrounds/carbonFiberNBAWhite.jpg","webpack://tipoffteams/webpack/runtime/global","webpack://tipoffteams/webpack/runtime/publicPath","webpack://tipoffteams/./src/index.js","webpack://tipoffteams/./src/logos/teamArray.js","webpack://tipoffteams/./src/scripts/transitionLogic.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","//This function will create a div for each team in the above array, and create an image object\n//inside each teamDiv. After, it will make the proper children.\n\nfunction populateTeams(teamLogoDiv, teams){\n    teams.forEach(team => {\n        const teamDiv = document.createElement(\"div\");\n        teamDiv.classList.add('team-logo');\n\n        const img = document.createElement('img');\n        img.src = `./src/logos/nbaLogos/${team.logo}`;\n        img.alt = team.name;\n\n        teamDiv.appendChild(img);\n        teamLogoDiv.appendChild(teamDiv);\n    })\n}\n\nexport default populateTeams;","export default __webpack_public_path__ + \"images/carbonFiberNBAWhite.jpg\";","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// Imports array of teams with picture file paths to use for populateTeams()\nimport teams from './logos/teamArray.js';\n// Imports function to put all logos on the index page\nimport populateTeams from './scripts/teamLogic.js';\n// Imports the picture for background use\nimport bgImage from '../src/backgrounds/carbonFiberNBAWhite.jpg'\ndocument.body.style.backgroundImage = `url(${bgImage})`\n\nimport selectTeam from './scripts/transitionLogic.js';\n// Gets the div where the team logos will go, will be used as a argument in populateTeams()\nconst teamLogoDiv = document.querySelector(\".team-logos\")\n\n//Will populate teams. See (./scripts/teamLogic.js)\npopulateTeams(teamLogoDiv, teams);\n\nselectTeam();","// array of objects that have a name (team name) and icon (image of logo)\nconst teams = [\n    {name: \"Hawks\", logo: \"atlantaHawks.png\"},\n    {name: \"Celtics\", logo: \"bostonCeltics.png\"},\n    {name: \"Nets\", logo: \"brooklynNets.png\"},\n    {name: \"Hornets\", logo: \"charlotteHornets.png\"},\n    {name: \"Bulls\", logo: \"chicagoBulls.png\"},\n    {name: \"Cavs\", logo: \"clevelandCavaliers.png\"},\n    {name: \"Mavs\", logo: \"dallasMavs.png\"},\n    {name: \"Nuggets\", logo: \"denverNuggets.png\"},\n    {name: \"Pistons\", logo: \"detroitPistons.png\"},\n    {name: \"Warriors\", logo: \"goldenStateWarriors.png\"},\n    {name: \"Rockets\", logo: \"houstonRockets.png\"},\n    {name: \"Pacers\", logo: \"indianaPacers.png\"},\n    {name: \"Clippers\", logo: \"LAClippers.png\"},\n    {name: \"Lakers\", logo: \"LALakers.png\"},\n    {name: \"Grizzlies\", logo: \"memphisGrizzlies.png\"},\n    {name: \"Heat\", logo: \"miamiHeat.png\"},\n    {name: \"Bucks\", logo: \"milwaukeeBucks.png\"},\n    {name: \"TimberWolves\", logo: \"minnesotaTimberWolves.png\"},\n    {name: \"Pelicans\", logo: \"NOPelicans.png\"},\n    {name: \"Knicks\", logo: \"NYKnicks.png\"},\n    {name: \"Thunder\", logo: \"OKCThunder.png\"},\n    {name: \"Magic\", logo: \"OrlandoMagic.png\"},\n    {name: \"Suns\", logo: \"PheonixSuns.png\"},\n    {name: \"76ers\", logo: \"Philadelphia76ers.png\"},\n    {name: \"TrailBlazers\", logo: \"portlandTrailBlazers.png\"},\n    {name: \"Kings\", logo: \"SacKings.png\"},\n    {name: \"Spurs\", logo: \"SASpurs.png\"},\n    {name: \"Raptors\", logo: \"torontoRaptors.png\"},\n    {name: \"Jazz\", logo: \"utahJazz.png\"},\n    {name: \"Wizards\", logo: \"washingtonWizards.png\"},\n]\n\nexport default teams;","// This funciton will let the user click on a logo to go to that teams page, as well as put\n// in a cool/clean animation that will highlight the team logo and move it to the team page\nfunction selectTeam(){\n    const teamLogos = document.querySelectorAll(\".team-logo\"); //Get every team logo\n    const selectTeam = document.querySelector(\"h2\");\n\n    const logoClickHandler = function(event) {\n        teamLogos.forEach(l => l.classList.remove('enlarged-logo')); //Housekeeping step, make sure no other enlarged-logo's exist\n\n        // Make a clone node. Why? This is because if you don't then you move the original \n        // logo. This messes up the flex box and shifts every logo. By making a clone\n        // we can shift that clone to become the enlarged logo/team page logo, and just make\n        // the orignal logo dissapear from view, but still exist. \n        const clone = this.cloneNode(true);\n        // These two steps ensure that the correct styling is used on the clone\n        clone.classList.remove('team-logo'); \n        clone.classList.add('cloned-team-logo');\n\n        // Get values of the original logo (both dimenstions and styles like margin)\n        // Pivitol beacuse the clone image will get the original, huge bloated image \n        // dimenstions/styling before putting it into any flexbox/making it smaller\n        const rect = this.getBoundingClientRect();\n        const computedStyles = window.getComputedStyle(this);\n\n        const originalImage = this.querySelector('img');  // Get the original image\n        const clonedImage = clone.querySelector('img');   // Get the cloned image\n\n        // Apply the styles directly to the cloned image\n        clonedImage.style.maxWidth = originalImage.style.maxWidth || '100%';\n        clonedImage.style.height = originalImage.style.height || 'auto';\n        clonedImage.style.maxHeight = originalImage.style.maxHeight || '13.5vh';\n\n        // Apply styles to cloned div\n        clone.style.margin = computedStyles.margin;\n        clone.style.width = rect.width + 'px';\n        clone.style.height = rect.height + 'px';\n        clone.style.top = (rect.top - 10) + 'px'; //Temp fix/Does not work on differing screens\n        clone.style.left = (rect.left + 17) + 'px'; //Temp fix/Does not work on differing screens\n        clone.style.position = 'absolute';\n\n\n        \n        // This will put cloned class on the clone, this is so we can reference it later\n        clone.classList.add('cloned');\n        //We need to append the child to the document, or else it won't be on the DOM at all\n        document.body.appendChild(clone);\n\n        //Here is were we add the enlarged-logo class to the logo\n        setTimeout(() =>{\n            clone.classList.add(\"enlarged-logo\");\n            setTimeout(() =>{\n                clone.style.top = \"calc(50% - 50px)\"; // top/left puts the logo in the middle, specific for my screen for now\n                clone.style.left = \"calc(50% + 100px)\";\n                clone.style.transform = \"translate(-50%, -50%) scale(4)\"; // Right now top left corner in middle, puts center of logo in middle and scales it up 4\n                teamLogos.forEach(l => l.classList.add('fade-out')); // Makes each logo fade\n                selectTeam.classList.add('fade-out'); //Makes select a team fade\n                // Now we move the logo to the top left...the css styling does not work right now, so doing inline styling\n                setTimeout(() => {\n                    clone.classList.add(\"move-to-top-left\");\n                    clone.style.top = \"40px\";\n                    clone.style.left = \"60px\";\n                    clone.style.transform = \"scale(2)\";\n                    const teamPage = document.querySelector(\".team-page\");\n                    teamPage.style.display = \"block\";\n                    setTimeout(() =>{\n                        teamPage.style.opacity = \"1\";\n                    }, 50);\n                }, 2000)\n            }, 0)\n        }, 500);\n\n        this.classList.add('dissapear');\n\n        teamLogos.forEach(logo => {\n            logo.removeEventListener(\"click\", logoClickHandler);\n            logo.style.cursor = \"default\";\n        })\n    }\n\n    teamLogos.forEach(logo => { //Add a event listner to each logo\n        logo.addEventListener(\"click\", logoClickHandler);\n    });\n}\n\nexport default selectTeam;"],"names":["teamLogoDiv","__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","body","style","backgroundImage","bgImage","querySelector","name","logo","forEach","team","teamDiv","createElement","classList","add","img","alt","appendChild","teamLogos","querySelectorAll","selectTeam","logoClickHandler","event","l","remove","clone","cloneNode","rect","getBoundingClientRect","computedStyles","getComputedStyle","originalImage","clonedImage","maxWidth","height","maxHeight","margin","width","top","left","position","setTimeout","transform","teamPage","display","opacity","removeEventListener","cursor","addEventListener"],"sourceRoot":""}